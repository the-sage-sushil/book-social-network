/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { findAllBookFeedback } from '../fn/feedback/find-all-book-feedback';
import { FindAllBookFeedback$Params } from '../fn/feedback/find-all-book-feedback';
import { PageResponseFeedbackResponse } from '../models/page-response-feedback-response';
import { postFeedback } from '../fn/feedback/post-feedback';
import { PostFeedback$Params } from '../fn/feedback/post-feedback';

@Injectable({ providedIn: 'root' })
export class FeedbackService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `postFeedback()` */
  static readonly PostFeedbackPath = '/feedbacks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postFeedback()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postFeedback$Response(params?: PostFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return postFeedback(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postFeedback$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postFeedback(params?: PostFeedback$Params, context?: HttpContext): Observable<number> {
    return this.postFeedback$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllBookFeedback()` */
  static readonly FindAllBookFeedbackPath = '/feedbacks/book/{book-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBookFeedback()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBookFeedback$Response(params: FindAllBookFeedback$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseFeedbackResponse>> {
    return findAllBookFeedback(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBookFeedback$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBookFeedback(params: FindAllBookFeedback$Params, context?: HttpContext): Observable<PageResponseFeedbackResponse> {
    return this.findAllBookFeedback$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseFeedbackResponse>): PageResponseFeedbackResponse => r.body)
    );
  }

}
